
//Глобальные переменные

#Область ГлобальныеПеременные

&НаКлиенте
Перем 
	Глоб_МассивСтруктур,
	Глоб_РазделительПути,
	Глоб_РазделительПолей;

&НаСервере
Перем  
	Глоб_ИндексНомерЛС,
	Глоб_ИндексФИО,
	Глоб_ИндексСуммаОплаты,
	Глоб_ИндексДатаОплаты,
	Глоб_ПозицияБлокаСчетчиков,
	Глоб_РазделительПути,
	Глоб_РазделительПолей,
	Глоб_РазделительСчетчиков,
	Глоб_РазделительКодовВНаименованииСчетчика;
#КонецОбласти

//Выгрузка

#Область Выгрузка

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
  ПериодВыгрузки = КонецМесяца(ПериодВыгрузки);
КонецПроцедуры

&НаКлиенте
Процедура ПутьВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	ДиалогОткрытияФайла.Заголовок = "Выберите каталог для файлов выгрузки";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		ПутьВыгрузки=ДиалогОткрытияФайла.Каталог;
	КонецЕсли;
	
КонецПроцедуры

// Получить значение реквизита
Функция ПолучитьЗначениеПериодическогоРеквизита(Ссылка, Реквизит)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ркЗначенияПериодическихСвойствОбъектовСрезПоследних.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.ркЗначенияПериодическихСвойствОбъектов.СрезПоследних(
	|			&НаДату,
	|			Свойство = &Свойство
	|				И Объект = &Объект) КАК ркЗначенияПериодическихСвойствОбъектовСрезПоследних
	|;";
	
	Запрос.УстановитьПараметр("Свойство", Реквизит);
	Запрос.УстановитьПараметр("Объект", Ссылка);
	Запрос.УстановитьПараметр("НаДату", ТекущаяДата());
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Значение;
	
КонецФункции

// Получить дополнительный реквизит
Функция ПолучитьПредопределенныйРеквизит(Предопределенный)
	
	Если Не ЗначениеЗаполнено(Предопределенный) Тогда
	//	Протокол("Не задан предопределенный реквизит.");
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизит = Предопределенный.Реквизит;
	Если Реквизит = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка() Тогда
		//Протокол("Не установлен реквизит "+Предопределенный+" в справочнике ""Соответствия реквизитов (ГИС ЖКХ)"". ");
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Реквизит;
	
КонецФункции

// Получить значение непериодического реквизита
Функция ПолучитьЗначениеНеПериодическогоРеквизита(Ссылка, Реквизит)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ркЛицевыеСчетаДополнительныеРеквизиты.Значение
	|ИЗ
	|	Справочник.ркЛицевыеСчета.ДополнительныеРеквизиты КАК ркЛицевыеСчетаДополнительныеРеквизиты
	|ГДЕ
	|	ркЛицевыеСчетаДополнительныеРеквизиты.Свойство = &Свойство
	|	И ркЛицевыеСчетаДополнительныеРеквизиты.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Свойство", Реквизит);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Значение;
	
КонецФункции
// Получить значение предопределенного реквизита для объекта
Функция ПЗнч(Ссылка, Предопределенный, ЗначениеПоУмолчанию="0", РеквизитОбязательный=Истина)
	
	Реквизит = ПолучитьПредопределенныйРеквизит(Предопределенный);
	
	Если ЗначениеЗаполнено(Реквизит) Тогда
		Если Реквизит.Периодический Тогда
			Результат = ПолучитьЗначениеПериодическогоРеквизита(Ссылка, Реквизит);
		Иначе
			Результат = ПолучитьЗначениеНеПериодическогоРеквизита(Ссылка, Реквизит);
		КонецЕсли;
		
		// Если значение доп.реквизита не задано, то возвращаем значение по-умолчанию для данного типа.
		// TODO: Пока делаем это только для Булева, нужно проверить остальные типы в местах вызова фукнции ПЗнч().
		Если Результат = Неопределено И Реквизит.ТипЗначения.СодержитТип(Тип("Булево")) Тогда // FIXME: составных типов у доп. реквизитов ГИС ЖКХ ПОКА нет, но вдруг будет в будущем...
			Результат = Реквизит.ТипЗначения.ПривестиЗначение();
		КонецЕсли;
	
		// FIXME: значение по-умолчанию для данного типа может быть валидным для целей выгрузки (например Ложь у типа Булево).
		// FIXME: нужно:
		// FIXME: 1) Если значение в регистре не найдено, то возвратить значение по-умолчанию для данного типа (а если тип составной?) или переданное в функцию значение по-умолчанию
		// FIXME: 2) Если возращается значение по-умолчанию, то вывести предупреждение в протокол. Но это нужно не всегда! (см. выше)
		Если Результат = Неопределено И РеквизитОбязательный Тогда
		//	Протокол(СтрШаблон("Значение реквизита ""%1"" не найдено для ""%2"".%3",
		//		Строка(Реквизит),
		//		Строка(Ссылка),
		//		?(Реквизит.Периодический," Проверьте, пожалуйста, дату установки периодических реквизитов.","")
		//	));
		КонецЕсли;
		
		Возврат Результат;
		
	Иначе
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
КонецФункции


&НаКлиенте
Процедура ВыполнитьВыгрузку(Команда)
	
	Адрес = СформироватьВыгрузкуНаСервере(ПериодВыгрузки);
	//ИмяРеестра = ПолучитьИмяРеестраНаСервере(Организация, РасчетныйСчет, Код);
	ИмяРеестра =  "L" +  Код +  Формат(Дата(ПериодВыгрузки), "ДФ=MMyy");
	ПолныйПуть = ПутьВыгрузки + Глоб_РазделительПути + ИмяРеестра + ".RKP";
			
	ПолучитьИзВременногоХранилища(Адрес).Записать(ПолныйПуть);
	УдалитьИзВременногоХранилища(Адрес);
	
	//ОчиститьСообщения();
	Сообщить("Файл выгрузки сформирован!");	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИмяРеестраНаСервере(СсылкаНаОрганизацию, СсылкаНаРасчетныйСчет, СсылкаНаКод)
	ИмяРеестра =  "L";// +  СсылкаНаКод +  Формат(Дата(ПериодВыгрузки), "ДФ=MMyy");
	Возврат ИмяРеестра;
КонецФункции

&НаСервере
Функция СформироватьВыгрузкуНаСервере(Период)
	
		
	ЗапросПоНачислениям = Новый Запрос;
	ЗапросПоНачислениям.Текст = "
		|ВЫБРАТЬ
		|     	ркЛицевыеСчета.Код КАК НомерЛС,
		|    	ркЛицевыеСчета.Ссылка КАК ЛицевойСчет,
		|    	регистр1.ВидРасчета КАК ВидРасчета,
		|    	ЕСТЬNULL(регистр1.Тариф, 0) КАК Тариф,
		|    	ЕСТЬNULL(регистр2.СуммаНачальныйОстаток, 0) КАК НачСальдо,
		|    	ЕСТЬNULL(регистр1.СуммаНачисленийОборот, 0) КАК Начисленно
		|    	
		|    	
		|ИЗ
		|      	Справочник.ркЛицевыеСчета КАК ркЛицевыеСчета
		|     		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ркНачисления.Обороты(&НачалоПериода,&КонецПериода ) КАК регистр1
		|     		ПО (регистр1.ЛицевойСчет = ркЛицевыеСчета.Ссылка)
		|	    	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ркЗадолженностьЛицевыхСчетов.ОстаткиИОбороты(&НачалоПериода,&КонецПериода) КАК регистр2
		|     		ПО (регистр2.ЛицевойСчет = ркЛицевыеСчета.Ссылка и регистр2.ВидРасчета = регистр1.ВидРасчета)
		|
		|ГДЕ
		|    	ркЛицевыеСчета.ЭтоГруппа = ЛОЖЬ
		|      	И ркЛицевыеСчета.ПометкаУдаления = ЛОЖЬ
		|	                                    
		|УПОРЯДОЧИТЬ ПО
		| 		НомерЛС
		|ИТОГИ
		|       КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЛицевойСчет),
		|  		СУММА(НачСальдо),
		|       СУММА(Начисленно)
		|ПО
		|  		ОБЩИЕ
		|";

	ЗапросПоНачислениям.УстановитьПараметр("НачалоПериода", НачалоМесяца(Период));
	ЗапросПоНачислениям.УстановитьПараметр("КонецПериода",КонецМесяца(Период));
	
	
	
	
	
	
	ЗапросСчетчики = Новый Запрос("ВЫБРАТЬ
	                              |	ркЛицевыеСчета.Ссылка КАК ЛицевойСчет,
	                              |	ркЛицевыеСчета.Помещение.Код КАК КодПомещения,
	                              |	ркЛицевыеСчета.Помещение КАК Помещение,
	                              |	ркСчетчики.Код КАК КодСчетчика,
	                              |	ркСчетчики.Ссылка КАК Счетчик,
	                              |	ркСостояниеСчетчиковСрезПоследних.Включен КАК Включен
	                              |ИЗ
	                              |	Справочник.ркЛицевыеСчета КАК ркЛицевыеСчета
	                              |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ркСчетчики КАК ркСчетчики
	                              |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ркСостояниеСчетчиков.СрезПоследних(&ПериодСчетчиков, ) КАК ркСостояниеСчетчиковСрезПоследних
	                              |			ПО ркСчетчики.Ссылка = ркСостояниеСчетчиковСрезПоследних.Счетчик
	                              |		ПО ркЛицевыеСчета.Помещение = ркСчетчики.Владелец
	                              |ГДЕ
	                              |	ркСостояниеСчетчиковСрезПоследних.Счетчик.Групповой = ЛОЖЬ
	                              |	И ркСостояниеСчетчиковСрезПоследних.Включен = ИСТИНА
								  |
	                              |УПОРЯДОЧИТЬ ПО
	                              |	ркЛицевыеСчета.Наименование");

	ЗапросСчетчики.УстановитьПараметр("ПериодСчетчиков", КонецМесяца(Период));
	//ЗапросСчетчики.УстановитьПараметр("Участки", Участки);
	ТаблСчетчиков = ЗапросСчетчики.Выполнить().Выгрузить();
	ТаблСчетчиков.Индексы.Добавить("ЛицевойСчет");
	
	
	
	лВыборка0 = ЗапросПоНачислениям.Выполнить().Выбрать();
	
//	КоличествоЗаписей = лВыборка0.ЛицевойСчет;
//	ОбщаяСуммаЗадолженности = Формат(лВыборка0.Сумма, "ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=3,0");
	

	Если лВыборка0.Количество() = 0 Тогда 
		Сообщить("Нет данных для выгрузки!");
		Адрес = Неопределено;
		Возврат Адрес;

	КонецЕсли;	 	
	
	  	лВыборка = лВыборка0;
		лВыборка.Следующий();

	
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
		Текст = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаТекста.ANSI);
		проб10="          ";
		Проб100=проб10+проб10+проб10+проб10+проб10+проб10+проб10+проб10+проб10+проб10;
		Текст.ЗаписатьСтроку(Проб100+Проб100+Проб100);

		
		месяц = Формат(ПериодВыгрузки, "ДФ=MMyy");
		сёня = Формат(ТекущаяДата(), "ДФ=ddММyy");  
 		ДатаФормирования=СтрЗаменить(сёня,".","");
		КодПУ = Код;
		Если (Код="585") тогда НазваниеПУ = "ОООУК ГАРАНТ-СЕРВИС" конецесли; 
		Если (Код="982") тогда НазваниеПУ = "ОООУК ГАРАНТ-СЕРВИС" конецесли; 
		ИтогоНачислили =0;
		ИтогоСальдо = 0;
		КолСток = 0;
		
		Текст.ЗаписатьСтроку(НазваниеПУ+"="+КодПУ+"="+месяц+"="+ДатаФормирования);

		
		
		Пока лВыборка.Следующий() Цикл	
			
			СтрокаСчетчиков = "";
			
			

			
			НачальноеСальдо = лВыборка.НачСальдо;
			Начислили =  лВыборка.Начисленно;
			СуммаНачислений100=Окр(Начислили*100); //начислено
			СуммаСальдо100=Окр(НачальноеСальдо*100);    //сальдо
				
				Если (СуммаНачислений100<0) 
				Тогда СуммаНачислений100=0; 
				КонецЕсли;
				
				
				
				СуммаИтого100=СуммаНачислений100+СуммаСальдо100;
				СуммаКОплате100=СуммаИтого100;
				
				
				Если (СуммаКОплате100<0) 
				Тогда СуммаКОплате100=0; 
				КонецЕсли;

				Если (НачальноеСальдо=0)и (Начислили=0) тогда Продолжить конецесли;
				
			ЛСБанка = "0";
			
			Попытка
				ДопРеквизитСвойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Номер РРКЦ", Истина);
				ЕстьСтроки = лВыборка.ЛицевойСчет.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", ДопРеквизитСвойство));
			
	       		Для каждого найдСтрока Из ЕстьСтроки Цикл
				ЛСБанка =  Строка(найдСтрока.Значение);
				КонецЦикла;	
			Исключение
			КонецПопытки;
			
			Если  (ЛСБанка = "0") тогда Сообщить("не привязанный счет "+лВыборка.НомерЛС); продолжить конецесли;
			
			тар = лВыборка.Тариф;
			Если тар=0 Тогда
			объем = 0;	
			иначе
			объем = Начислили/тар;
			конецЕсли;
			
			тар = Формат(тар, "ЧДЦ=2");
			чТар = СтрЗаменить(Строка(тар),",",".");
			
			Объем = Формат(Объем, "ЧДЦ=2");
			чОбъем = СтрЗаменить(Строка(Объем),",",".");
			
			КодУсл=Строка(лВыборка.ВидРасчета);
			Если (КодУсл="Содержание и ремонт жилья")	тогда КодУсл="3" конецесли;
			Если (КодУсл="Электроэнергия ОДН")			тогда КодУсл="151" конецесли;
			Если (КодУсл="проверка дымоходов,вентканалов")	тогда КодУсл="228" конецесли;
			Если (КодУсл="капитальный ремонт")	тогда КодУсл="5" конецесли;
			Если (КодУсл="Капитальный ремонт ДОЛГ за 2017-2018г")	тогда КодУсл="48" конецесли;
			Если (КодУсл="взносы на экспертизу конструктивных элементов")	тогда КодУсл="436" конецесли;
			Если (КодУсл="ДИАГНОСТИРОВАНИЕ ВДГО")	тогда КодУсл="555" конецесли;
			Если (КодУсл="Вывоз ЖБО")	тогда КодУсл="12" конецесли;
			Если (КодУсл="Наем")	тогда КодУсл="4" конецесли;
			
			Если (СтрДлина(КодУсл)>3)Тогда Сообщить("не заменена услуга "+КодУсл) КонецЕсли;
			
			Если (Код="585")и (КодУсл="48") тогда продолжить конецесли;
			Если (Код="585")и  (КодУсл="5") тогда продолжить конецесли;
			Если (Код="982")и ((КодУсл<>"48")и (КодУсл<>"5")) тогда продолжить конецесли;
			
			ЛСПУ = Строка(СокрЛП(лВыборка.НомерЛС));
			
				//           1         2        3            4                  5          6                   7               8   9
				Строчечка=ЛСБанка+"="+чТар+"="+чОбъем+"="+СуммаНачислений100+"="+месяц+"="+СуммаСальдо100+"="+ДатаФормирования+"=0=0="; 
				//                               10              11             12          13   14  16  18  20  22
				Строчечка=Строчечка+СуммаКОплате100+"="+СуммаКОплате100+"="+КодУсл+"="+ЛСПУ+"=0=0=0=0=0=0=0=0=0=0=0="+СуммаНачислений100+"=0";
				Строчечка=СтрЗаменить(Строчечка, Символы.НПП,"");
				
				ИтогоНачислили=ИтогоНачислили+СуммаНачислений100;
				ИтогоСальдо=ИтогоСальдо+СуммаСальдо100;
				КолСток=КолСток+1;
				
			Текст.ЗаписатьСтроку(Строчечка);			
		КонецЦикла;
		
		
	ЗапросПоДолгам = Новый Запрос;
	ЗапросПоДолгам.Текст = "
		|  ВЫБРАТЬ
		|     	ркЛицевыеСчета.Код КАК НомерЛС,
		|    	ркЛицевыеСчета.Ссылка КАК ЛицевойСчет,
		|    	регистр2.ВидРасчета КАК ВидРасчета,
		|        	//ЕСТЬNULL(регистр1.Тариф, 0) КАК Тариф,
		|    	ЕСТЬNULL(регистр2.СуммаНачальныйОстаток, 0) КАК НачСальдо,
		|        ЕСТЬNULL(регистр1.СуммаНачисленийОборот, 0) КАК Начисленно
		|    	
		|    	
		|     ИЗ
		|      	Справочник.ркЛицевыеСчета КАК ркЛицевыеСчета
		|     		
		|     		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ркЗадолженностьЛицевыхСчетов.ОстаткиИОбороты(&НачалоПериода,&КонецПериода) КАК регистр2
		|     		ПО (регистр2.ЛицевойСчет = ркЛицевыеСчета.Ссылка )
		|
		|         		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ркНачисления.Обороты(&НачалоПериода,&КонецПериода ) КАК регистр1
		|         		ПО (регистр1.ЛицевойСчет = ркЛицевыеСчета.Ссылка и регистр2.ВидРасчета = регистр1.ВидРасчета)
		|
		|     ГДЕ
		|    	ркЛицевыеСчета.ЭтоГруппа = ЛОЖЬ
		|      	И ркЛицевыеСчета.ПометкаУдаления = ЛОЖЬ
		|      	и регистр2.СуммаНачальныйОстаток <> 0
		|        и (ЕСТЬNULL(регистр1.СуммаНачисленийОборот, 0) = 0) 
		|      	      		                                    
		|      УПОРЯДОЧИТЬ ПО
		| 		НомерЛС
		|       ИТОГИ
		|       	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЛицевойСчет),
		|        
		|  	СУММА(НачСальдо)
		|             	//СУММА(Начисленно)
		|       ПО
		|  		 	ОБЩИЕ
		|";

	ЗапросПоДолгам.УстановитьПараметр("НачалоПериода", НачалоМесяца(Период));
	ЗапросПоДолгам.УстановитьПараметр("КонецПериода",КонецМесяца(Период));
	

	лВыборка = ЗапросПоДолгам.Выполнить().Выбрать();
	
	

	
		лВыборка.Следующий();

//	КоличествоЗаписей = лВыборка0.ЛицевойСчет;
//	ОбщаяСуммаЗадолженности = Формат(лВыборка0.Сумма, "ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=3,0");
	
		
		Пока лВыборка.Следующий() Цикл	
			
			
			НачальноеСальдо = лВыборка.НачСальдо;
			Начислили =  лВыборка.Начисленно;
			СуммаНачислений100=Окр(Начислили*100); //начислено
			СуммаСальдо100=Окр(НачальноеСальдо*100);    //сальдо
				
				Если (СуммаНачислений100<0) 
				Тогда СуммаНачислений100=0; 
				КонецЕсли;
				
				
				
				СуммаИтого100=СуммаНачислений100+СуммаСальдо100;
				СуммаКОплате100=СуммаИтого100;
				
				
				Если (СуммаКОплате100<0) 
				Тогда СуммаКОплате100=0; 
				КонецЕсли;

				Если (НачальноеСальдо=0)и (Начислили=0) тогда Продолжить конецесли;
				
			ЛСБанка = "0";
			
			Попытка
				ДопРеквизитСвойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Номер РРКЦ", Истина);
				ЕстьСтроки = лВыборка.ЛицевойСчет.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", ДопРеквизитСвойство));
			
	       		Для каждого найдСтрока Из ЕстьСтроки Цикл
				ЛСБанка =  Строка(найдСтрока.Значение);
				КонецЦикла;	
			Исключение
			КонецПопытки;
			
			Если  (ЛСБанка = "0") тогда Сообщить("не привязанный счет "+лВыборка.НомерЛС); продолжить конецесли;
			
			
			тар = "0.0";
			чТар = "0.0";
			
			Объем = "0.0";
			чОбъем = "0.0";
			
			КодУсл=Строка(лВыборка.ВидРасчета);
			Если (КодУсл="Содержание и ремонт жилья")	тогда КодУсл="3" конецесли;
			Если (КодУсл="Электроэнергия ОДН")			тогда КодУсл="151" конецесли;
			Если (КодУсл="проверка дымоходов,вентканалов")	тогда КодУсл="228" конецесли;
			Если (КодУсл="капитальный ремонт")	тогда КодУсл="5" конецесли;
			Если (КодУсл="Капитальный ремонт ДОЛГ за 2017-2018г")	тогда КодУсл="48" конецесли;
			Если (КодУсл="взносы на экспертизу конструктивных элементов")	тогда КодУсл="436" конецесли;
			Если (КодУсл="ДИАГНОСТИРОВАНИЕ ВДГО")	тогда КодУсл="555" конецесли;
			Если (КодУсл="Вывоз ЖБО")	тогда КодУсл="12" конецесли;
			Если (КодУсл="Наем")	тогда КодУсл="4" конецесли;
			
			Если (СтрДлина(КодУсл)>3)Тогда Сообщить("не заменена услуга "+КодУсл) КонецЕсли;
			
			

			Если (Код="585")и (КодУсл="48") тогда продолжить конецесли;
			Если (Код="585")и  (КодУсл="5") тогда продолжить конецесли;
			Если (Код="982")и ((КодУсл<>"48")и (КодУсл<>"5")) тогда продолжить конецесли;
			
			месяц = Формат(ПериодВыгрузки, "ДФ=MMyy");
			сёня = Формат(ТекущаяДата(), "ДФ=ddММyy");  
 			ДатаФормирования=СтрЗаменить(сёня,".","");
			ЛСПУ = Строка(СокрЛП(лВыборка.НомерЛС));
			
				//           1         2        3            4                  5          6                   7               8   9
				Строчечка=ЛСБанка+"="+чТар+"="+чОбъем+"="+СуммаНачислений100+"="+месяц+"="+СуммаСальдо100+"="+ДатаФормирования+"=0=0="; 
				//                               10              11             12          13   14  16  18  20  22
				Строчечка=Строчечка+СуммаКОплате100+"="+СуммаКОплате100+"="+КодУсл+"="+ЛСПУ+"=0=0=0=0=0=0=0=0=0=0=0="+СуммаНачислений100+"=0";
				Строчечка=СтрЗаменить(Строчечка, Символы.НПП,"");
				
				ИтогоНачислили=ИтогоНачислили+СуммаНачислений100;
				ИтогоСальдо=ИтогоСальдо+СуммаСальдо100;
				КолСток=КолСток+1;
				
			Текст.ЗаписатьСтроку(Строчечка);			
		КонецЦикла;
		
		
				Строчечка="999999999="+ИтогоНачислили+"="+ИтогоСальдо+"="+КолСток;
				Строчечка=СтрЗаменить(Строчечка, Символы.НПП,"");
		 			Текст.ЗаписатьСтроку(Строчечка);			

		
		
		Текст.Закрыть();
		
		Данные = Новый ДвоичныеДанные(ИмяВременногоФайла);
		Адрес = ПоместитьВоВременноеХранилище(Данные, УникальныйИдентификатор);
		
	

	Возврат Адрес;
	
КонецФункции

&НаСервере
Функция ПолучитьДопРеквизит(Ссылка)
    Выгружать = Ложь;
    ТаблицаДопСвойств = УправлениеСвойствами.ПолучитьЗначенияСвойств(Ссылка,,,);
    Если ТаблицаДопСвойств.Количество() > 0 Тогда
        Выгружать = ТаблицаДопСвойств[0].Значение;
    КонецЕсли;    
    Возврат Выгружать;
КонецФункции

&НаСервере
Функция ПолучитьЗначениеДопРеквизита(Ссылка, Свойство) Экспорт

    ПараметрыОтбора = Новый Структура;
    ПараметрыОтбора.Вставить("Свойство",Свойство);
    Массив = Ссылка.ДополнительныеРеквизиты.НайтиСтроки(ПараметрыОтбора);

    Если Массив.Количество() = 0 Тогда
        Возврат Неопределено;
    Иначе
        Возврат Массив[0].Значение.Получить(ПериодВыгрузки);
    КонецЕсли;

КонецФункции

&НаСервере
Функция СформироватьКорректировкиНаСервере(Период)
	
		
	ЗапросПоНачислениям = Новый Запрос;
	ЗапросПоНачислениям.Текст = "ВЫБРАТЬ
		|     	ркЛицевыеСчета.Код КАК НомерЛС,
		|    	ркЛицевыеСчета.Ссылка КАК ЛицевойСчет,
		|    	регистр1.ВидРасчета КАК ВидРасчета,
		|    	ЕСТЬNULL(регистр2.СуммаНачальныйОстаток, 0) КАК НачСальдо,
		|       ЕСТЬNULL(регистр1.СуммаНачисленийОборот, 0) КАК Начисленно
		|    	
		|    	
		|ИЗ
		|      	Справочник.ркЛицевыеСчета КАК ркЛицевыеСчета
		|     		
    	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ркНачисления.Обороты(&НачалоПериода, &КонецПериода, , ) КАК регистр1
        |		ПО (регистр1.ЛицевойСчет = ркЛицевыеСчета.Ссылка)

        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ркЗадолженностьЛицевыхСчетов.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, , , ) КАК регистр2
        |		ПО (регистр2.ЛицевойСчет = ркЛицевыеСчета.Ссылка)
       	|			И (регистр2.ВидРасчета = регистр1.ВидРасчета)
		|
		|ГДЕ
		|    	ркЛицевыеСчета.ЭтоГруппа = ЛОЖЬ
		|      	И ркЛицевыеСчета.ПометкаУдаления = ЛОЖЬ
		|      	      		                                    
		|УПОРЯДОЧИТЬ ПО
		| 		НомерЛС
		|ИТОГИ
		|	СУММА(НачСальдо),
		|	СУММА(Начисленно)
		| ПО
		|  	ОБЩИЕ,
		|	ЛицевойСчет
		|";

	ЗапросПоНачислениям.УстановитьПараметр("НачалоПериода", '20180101');
	ЗапросПоНачислениям.УстановитьПараметр("КонецПериода",КонецМесяца(Период));
	
	
	
	
	ВыгрузкаИтога = ЗапросПоНачислениям.Выполнить();
  	лВыборка0 = ВыгрузкаИтога.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"ЛицевойСчет");


	Если лВыборка0.Количество() = 0 Тогда 
		Сообщить("Нет данных для выгрузки!");
		Адрес = Неопределено;
		Возврат Адрес;

	КонецЕсли;	 	
	

	
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
		Текст = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаТекста.ANSI);
		проб10="          ";
		Проб100=проб10+проб10+проб10+проб10+проб10+проб10+проб10+проб10+проб10+проб10;
		Текст.ЗаписатьСтроку(Проб100+Проб100+Проб100);
		
		месяц = Формат(ПериодВыгрузки, "ДФ=MMyy");
		сёня = Формат(ТекущаяДата(), "ДФ=ddММyy");  
 		ДатаФормирования=СтрЗаменить(сёня,".","");
		КодПУ = Код;
		Если (Код="585") тогда НазваниеПУ = "ООО УК ГАРАНТ-СЕРВИС" конецесли; 
		Если (Код="982") тогда НазваниеПУ = "ООО УК ГАРАНТ-СЕРВИС" конецесли; 
		ИтогоНачислили =0;
		ИтогоСальдо = 0;
		КолСток = 0;
		
		Текст.ЗаписатьСтроку(НазваниеПУ+"="+КодПУ+"="+ДатаФормирования);
		
		
		Пока лВыборка0.Следующий() Цикл	//по лицевым счетам

			 ЛицевойСчетПров = "";
			 
			ОбщПлощадь = "0";
			ДопРеквизитСвойство1 = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Общая площадь лицевого счета");
			ОбщПлощадь =  Строка(ПЗнч(лВыборка0.ЛицевойСчет, Справочники.ркГИССоответствияРеквизитов.ЛицевыеСчета_ОбщаяПлощадьЖилогоПомещенияПоПаспорту));
			ОбщПлощадь =СтрЗаменить(ОбщПлощадь,",",".") ;
			
			ЛСБанка = "0";
			Попытка
				ДопРеквизитСвойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Номер РРКЦ", Истина);
				ЕстьСтроки = лВыборка0.ЛицевойСчет.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", ДопРеквизитСвойство));
			
	       		Для каждого найдСтрока Из ЕстьСтроки Цикл
				ЛСБанка =  СокрЛП(найдСтрока.Значение);
				КонецЦикла;	
			Исключение
			КонецПопытки;
			 
			ЛСПУ = Строка(СокрЛП(лВыборка0.НомерЛС));
			ФИО = ВРег(СокрЛП(лВыборка0.ЛицевойСчет.Наименование));
			ФИО=ВРег(СтрЗаменить(ФИО,",",""));
			
			КладрУлицы = лВыборка0.ЛицевойСчет.Дом.Владелец.КодКладр;
			КладрУлицы=СтрЗаменить(КладрУлицы, Символы.НПП,"");

			//Сообщить(КладрУлицы);
			КодПустойГорода="3100200100000";
			КодПустойУлицы  = "31002001000000000";
		Если(Найти(КладрУлицы,"31")>0) тогда  //если заполнен встроеный кладр
			КодУлицы=СокрЛП(КладрУлицы);
			КодГорода=Лев(КодУлицы,13); 
			НазвУлицы=ВРег(СокрЛП(лВыборка0.ЛицевойСчет.Дом.Владелец));
		иначе                                     //иначе по коду дома
			КодУлицы=КодПустойУлицы;
			КодГорода=КодПустойГорода; 
		конецЕсли; 
		
		//Если(Найти(КодУлицы,"310")=0) тогда  КодГорода="3100200100000"; КодУлицы="31002001000000000";           конецЕсли;  
	
		НазвУлицы=ВРег(СокрЛП(лВыборка0.ЛицевойСчет.Дом.Владелец));
		Если (Найти(НазвУлицы,"(")=0) 
		тогда НазвУлицы=НазвУлицы+"(Г/АЛЕКСЕЕВКА)";
		КонецЕсли;	
		
		ТипУлицы="УЛ";
		Если (Найти(НазвУлицы,"УЛ")>0) тогда ТипУлицы="УЛ";
		ИначеЕсли (Найти(НазвУлицы,"ПЛ")>0) тогда ТипУлицы="ПЛ";
		ИначеЕсли (Найти(НазвУлицы,"ПЕР")>0) тогда ТипУлицы="ПЕР";
		ИначеЕсли (Найти(НазвУлицы,"ТУП")>0) тогда ТипУлицы="ТУП"; 
		ИначеЕсли (Найти(НазвУлицы,"С/")>0) тогда ТипУлицы="Б/У";
		ИначеЕсли (Найти(НазвУлицы,"Х/")>0) тогда ТипУлицы="Б/У";	
		КонецЕсли;
		НазвУлицы=СтрЗаменить(НазвУлицы,"УЛ.","");
		Если (СокрЛП(НазвУлицы)="") Тогда  		НазвУлицы=ВРег(СокрЛП(лВыборка0.ЛицевойСчет.Дом.Владелец));  КонецЕсли;

		ДомНомер=СокрЛП(лВыборка0.ЛицевойСчет.Дом.Номер+лВыборка0.ЛицевойСчет.Дом.Корпус);
		ДомНомер=ВРег(СтрЗаменить(ДомНомер," ",""));
		Если ДомНомер="" тогда ДомНомер=лВыборка0.ЛицевойСчет.Дом.Наименование; КонецЕсли;
		Если ДомНомер="" тогда ДомНомер="0"; КонецЕсли;
		
		Кв=СокрЛП(лВыборка0.ЛицевойСчет.Помещение.Номер);
		Если Кв="" тогда Кв=лВыборка0.ЛицевойСчет.Помещение.Наименование; КонецЕсли;
		Если Кв="" тогда Кв="0"; КонецЕсли; 
			
		
		ОбщПл=ОбщПлощадь;//Формат(Запрос.Объект.ОбщПл.Получить(ВыбКонПериода),"Ч2.2");
		КолПрож="0";//Запрос.Объект.КолПроп.Получить(ВыбКонПериода);
		ДатаИзм=ДатаФормирования;
		
	   	//Если (СокрЛП(Запрос.ТипСобств)="Приватизированная") Тогда КодСобственности="10" 
		//ИначеЕсли (СокрЛП(Запрос.ТипСобств)="Муниципальная") Тогда КодСобственности="5" 
		//ИначеЕсли (СокрЛП(Запрос.ТипСобств)="Кооперативная") Тогда КодСобственности="2"
		//ИначеЕсли (СокрЛП(Запрос.ТипСобств)="Частная") Тогда КодСобственности="1"
		//Иначе  
		КодСобственности="0" ;
		//КонецЕсли;	

			лВыборка = лВыборка0.Выбрать();
			Пока лВыборка.Следующий() Цикл //по виду расчета		
				СтрокаСчетчиков = "";
			
			
			
			НачальноеСальдо = лВыборка.НачСальдо;
			Начислили =  лВыборка.Начисленно;
			//Если (НачальноеСальдо=0)и (Начислили=0) тогда Продолжить конецесли;
				
			
			КодУсл=Строка(лВыборка.ВидРасчета);
			Если (КодУсл="Содержание и ремонт жилья")	тогда КодУсл="3" конецесли;
			Если (КодУсл="Электроэнергия ОДН")			тогда КодУсл="50" конецесли;
			Если (КодУсл="проверка дымоходов,вентканалов")	тогда КодУсл="22" конецесли;
			Если (КодУсл="капитальный ремонт")	тогда КодУсл="5" конецесли;
			Если (КодУсл="Капитальный ремонт ДОЛГ за 2017-2018г")	тогда КодУсл="48" конецесли;
			Если (КодУсл="взносы на экспертизу конструктивных элементов")	тогда КодУсл="436" конецесли;
			Если (КодУсл="ДИАГНОСТИРОВАНИЕ ВДГО")	тогда КодУсл="555" конецесли;
			Если (КодУсл="Вывоз ЖБО")	тогда КодУсл="12" конецесли;
			Если (КодУсл="Наем")	тогда КодУсл="4" конецесли;
			
			Если (СтрДлина(КодУсл)>3)Тогда Сообщить("не заменена услуга "+КодУсл) КонецЕсли;
			
			Если (Код="585")и (КодУсл="48") тогда продолжить конецесли;
			Если (Код="585")и  (КодУсл="5") тогда продолжить конецесли;
			Если (Код="982")и ((КодУсл<>"48")и (КодУсл<>"5")) тогда продолжить конецесли;
			
		
		
		
		
			Если ЛицевойСчетПров = лВыборка.ЛицевойСчет Тогда
				СписокУслуг = СписокУслуг +";"+КодУсл;
			Иначе
			ЛицевойСчетПров = лВыборка.ЛицевойСчет;
			СписокУслуг=КодУсл;
			КонецЕсли;
		
			КонецЦикла;	
			Если Лев(СписокУслуг,1)=";" Тогда СписокУслуг=Сред(СписокУслуг,2); КонецЕсли;
			
		Строчечка=ЛСБанка+"="+ЛСПУ+"="+ФИО+"="+КодГорода+"="+КодУлицы+"=0="+ТипУлицы+"="+НазвУлицы+"=";  
		//                      9        10        11    12    13   14     15          16      17 19      20
		Строчечка=Строчечка+ДомНомер+"="+Кв+"="+ОбщПл+"=0=0=0="+КолПрож+"="+КолПрож+"=0=0=0="+ДатаИзм+"="; 
		//                                21  23         24          25    28 ГИС
		Строчечка=Строчечка+СписокУслуг+"=0=0=0="+КодСобственности+"=0=0=0=0=0";
		//				Строчечка=СтрЗаменить(Строчечка, Символы.НПП,"");

		Текст.ЗаписатьСтроку(Строчечка);			
		КолСток=КолСток+1;

		КонецЦикла;
		
		
	ЗапросПоДолгам = Новый Запрос;
	ЗапросПоДолгам.Текст = "
		|  ВЫБРАТЬ
		|     	ркЛицевыеСчета.Код КАК НомерЛС,
		|    	ркЛицевыеСчета.Ссылка КАК ЛицевойСчет,
		|    	регистр1.ВидРасчета КАК ВидРасчета,
		|    	ЕСТЬNULL(регистр2.СуммаНачальныйОстаток, 0) КАК НачСальдо,
		|       ЕСТЬNULL(регистр1.СуммаНачисленийОборот, 0) КАК Начисленно
		|    	
		|    	
		|ИЗ
		|      	Справочник.ркЛицевыеСчета КАК ркЛицевыеСчета
		|     		
		|     		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ркЗадолженностьЛицевыхСчетов.ОстаткиИОбороты(&НачалоПериода,&КонецПериода) КАК регистр2
		|     		ПО (регистр2.ЛицевойСчет = ркЛицевыеСчета.Ссылка )
		|
		|         	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ркНачисления.Обороты(&НачалоПериода,&КонецПериода ) КАК регистр1
		|         	ПО (регистр1.ЛицевойСчет = ркЛицевыеСчета.Ссылка и регистр1.ВидРасчета = регистр2.ВидРасчета)
		|
		|ГДЕ
		|    	ркЛицевыеСчета.ЭтоГруппа = ЛОЖЬ
		|      	И ркЛицевыеСчета.ПометкаУдаления = ЛОЖЬ
		|      	      		                                    
		|УПОРЯДОЧИТЬ ПО
		| 		НомерЛС
		|ИТОГИ
		|	СУММА(НачСальдо),
		|	СУММА(Начисленно)
		| ПО
		|  	ОБЩИЕ,
		|	ЛицевойСчет
		|";

	ЗапросПоДолгам.УстановитьПараметр("НачалоПериода", ДобавитьМесяц(ТекущаяДата(), -3));
	ЗапросПоДолгам.УстановитьПараметр("КонецПериода",КонецМесяца(Период));
	

	лВыборка = ЗапросПоДолгам.Выполнить().Выбрать();
	
	

	
		лВыборка.Следующий();

	
		
		Пока лВыборка.Следующий() Цикл	
			
			
			НачальноеСальдо = лВыборка.НачСальдо;
			Начислили =  лВыборка.Начисленно;
			СуммаНачислений100=Окр(Начислили*100); //начислено
			СуммаСальдо100=Окр(НачальноеСальдо*100);    //сальдо
				
				Если (СуммаНачислений100<0) 
				Тогда СуммаНачислений100=0; 
				КонецЕсли;
				
				
				
				СуммаИтого100=СуммаНачислений100+СуммаСальдо100;
				СуммаКОплате100=СуммаИтого100;
				
				
				Если (СуммаКОплате100<0) 
				Тогда СуммаКОплате100=0; 
				КонецЕсли;

				Если (НачальноеСальдо=0)и (Начислили=0) тогда Продолжить конецесли;
				
			ЛСБанка = "0";
				ОбщПлощадь = "0_0";
		
			//Попытка
				ДопРеквизитСвойство1 = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Общая площадь лицевого счета");

					ОбщПлощадь =  Строка(ПЗнч(лВыборка.ЛицевойСчет, Справочники.ркГИССоответствияРеквизитов.ЛицевыеСчета_ОбщаяПлощадьЖилогоПомещенияПоПаспорту));
					ОбщПлощадь =СтрЗаменить(ОбщПлощадь,",",".") ;
				//сообщить(ОбщПлощадь);
		//Исключение
			//КонецПопытки;
			
			//Сообщить(ПолучитьЗначениеДопРеквизита(лВыборка.ЛицевойСчет,ДопРеквизитСвойство1));
			
			Попытка
				ДопРеквизитСвойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Номер РРКЦ", Истина);
				ЕстьСтроки = лВыборка.ЛицевойСчет.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", ДопРеквизитСвойство));
			
	       		Для каждого найдСтрока Из ЕстьСтроки Цикл
				ЛСБанка =  Строка(найдСтрока.Значение);
				КонецЦикла;	
			Исключение
			КонецПопытки;
			
			
			

			
			КладрУлицы = лВыборка.ЛицевойСчет.Дом.Владелец.КодКладр;
			
			//Если  (ЛСБанка = "0") тогда Сообщить("не привязанный счет "+лВыборка.НомерЛС); продолжить конецесли;
			
			
			КодУсл=Строка(лВыборка.ВидРасчета);
			Если (КодУсл="Содержание и ремонт жилья")	тогда КодУсл="3" конецесли;
			Если (КодУсл="Электроэнергия ОДН")			тогда КодУсл="50" конецесли;
			Если (КодУсл="проверка дымоходов,вентканалов")	тогда КодУсл="22" конецесли;
			Если (КодУсл="капитальный ремонт")	тогда КодУсл="5" конецесли;
			Если (КодУсл="Капитальный ремонт ДОЛГ за 2017-2018г")	тогда КодУсл="48" конецесли;
			Если (КодУсл="взносы на экспертизу конструктивных элементов")	тогда КодУсл="436" конецесли;
			Если (КодУсл="ДИАГНОСТИРОВАНИЕ ВДГО")	тогда КодУсл="555" конецесли;
			Если (КодУсл="Вывоз ЖБО")	тогда КодУсл="12" конецесли;
			Если (КодУсл="Наем")	тогда КодУсл="4" конецесли;
			
			Если (СтрДлина(КодУсл)>3)Тогда Сообщить("не заменена услуга "+КодУсл) КонецЕсли;
			
			Если (Код="585")и (КодУсл="48") тогда продолжить конецесли;
			Если (Код="585")и  (КодУсл="5") тогда продолжить конецесли;
			Если (Код="982")и ((КодУсл<>"48")и (КодУсл<>"5")) тогда продолжить конецесли;
			
			ЛСПУ = Строка(СокрЛП(лВыборка.НомерЛС));
			ФИО = Строка(СокрЛП(лВыборка.ЛицевойСчет.Наименование));
			
			КодПустойГорода="3100200100000";
			КодПустойУлицы  = "31002001000000000";
		Если(Найти(КладрУлицы,"310")>0) тогда  //если заполнен встроеный кладр
			КодУлицы=СокрЛП(КладрУлицы);
			КодГорода=Лев(КодУлицы,13); 
			НазвУлицы=ВРег(СокрЛП(лВыборка.ЛицевойСчет.Дом.Владелец));
		иначе                                     //иначе по коду дома
			КодУлицы=КодПустойУлицы;
			КодГорода=КодПустойГорода; 
			КодПустойУлицы=КодГорода+"0000";
	
		конецЕсли; 
		
		Если(Найти(КодУлицы,"310")=0) тогда  КодГорода="3100200100000"; КодУлицы="31002001000000000";           конецЕсли;  
		
		НазвУлицы=ВРег(СокрЛП(лВыборка.ЛицевойСчет.Дом.Владелец));
		Если (Найти(НазвУлицы,"(")=0) 
		тогда НазвУлицы=НазвУлицы+"(Г/АЛЕКСЕЕВКА)";
		КонецЕсли;	
		
		Если (Найти(НазвУлицы,"УЛ")>0) тогда ТипУлицы="УЛ";
		ИначеЕсли (Найти(НазвУлицы,"ПЛ")>0) тогда ТипУлицы="ПЛ";
		ИначеЕсли (Найти(НазвУлицы,"ПЕР")>0) тогда ТипУлицы="ПЕР";
		ИначеЕсли (Найти(НазвУлицы,"ТУП")>0) тогда ТипУлицы="ТУП"; 
		ИначеЕсли (Найти(НазвУлицы,"С/")>0) тогда ТипУлицы="Б/У";
		ИначеЕсли (Найти(НазвУлицы,"Х/")>0) тогда ТипУлицы="Б/У";	
		КонецЕсли;
		НазвУлицы=СтрЗаменить(НазвУлицы,"УЛ.","");
		Если (СокрЛП(НазвУлицы)="") Тогда  		НазвУлицы=ВРег(СокрЛП(лВыборка.ЛицевойСчет.Дом.Владелец));  КонецЕсли;

		ДомНомер=СокрЛП(лВыборка.ЛицевойСчет.Дом.Номер+лВыборка.ЛицевойСчет.Дом.Корпус);
		ДомНомер=ВРег(СтрЗаменить(ДомНомер," ",""));
		Если ДомНомер="" тогда ДомНомер="0"; КонецЕсли;
		
		Кв=СокрЛП(лВыборка.ЛицевойСчет.Помещение.Номер);
		Если Кв="" тогда Кв="0"; КонецЕсли; 
			
		
		ОбщПл=ОбщПлощадь;//Формат(Запрос.Объект.ОбщПл.Получить(ВыбКонПериода),"Ч2.2");
		КолПрож="0";//Запрос.Объект.КолПроп.Получить(ВыбКонПериода);
		ДатаИзм=ДатаФормирования;
		СписокУслуг=КодУсл; 
					КодСобственности="0" ;


			
		Строчечка=ЛСБанка+"="+ЛСПУ+"="+ФИО+"="+КодГорода+"="+КодУлицы+"=0="+ТипУлицы+"="+НазвУлицы+"=";  
		//                      9        10        11    12    13   14     15          16      17 19      20
		Строчечка=Строчечка+ДомНомер+"="+Кв+"="+ОбщПл+"=0.00=0.00=0.00="+КолПрож+"="+КолПрож+"=0=0=0="+ДатаИзм+"="; 
		//                                21  23         24          25    28 ГИС
		Строчечка=Строчечка+СписокУслуг+"=0=0=0="+КодСобственности+"=0=0=0=0=0";
				
				
				
			//	КолСток=КолСток+1;
			//	
			//Текст.ЗаписатьСтроку(Строчечка);			
		КонецЦикла;
		
		
				Строчечка="999999999="+КолСток;
				Строчечка=СтрЗаменить(Строчечка, Символы.НПП,"");
		 			Текст.ЗаписатьСтроку(Строчечка);			

		
		
		Текст.Закрыть();
		
		Данные = Новый ДвоичныеДанные(ИмяВременногоФайла);
		Адрес = ПоместитьВоВременноеХранилище(Данные, УникальныйИдентификатор);
		
	

	Возврат Адрес;
	
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ)
	ПериодВыгрузки = ркОбщегоНазначенияСервер.ПолучитьДатуОкончанияТекущегоРасчетногоПериода();
КонецПроцедуры

функция СформироватьСтрокуАдреса(СтрРезЗапроса)
	
	Город = ? (СтрРезЗапроса.Город <> "", СтрРезЗапроса.Город + " г, ", "");
	НаселенныйПункт = ? (СтрРезЗапроса.НаселенныйПункт <> "", СтрРезЗапроса.НаселенныйПункт + ", ", "");
	Улица = ? (Строка(СтрРезЗапроса.Улица) <> "", "ул."+строка(СтрРезЗапроса.Улица) + ", ", "");
	Дом = "д." + СтрРезЗапроса.Дом;
	Корпус = ? (СтрРезЗапроса.Корпус <> "", "/" + СтрРезЗапроса.Корпус, "");
	Квартира = ? (СтрРезЗапроса.Квартира <> "", ", кв." + СтрРезЗапроса.Квартира, "");
	
	Адрес = Город+НаселенныйПункт+Улица+Дом+Корпус+Квартира;
	
	Возврат Адрес;
	
КонецФункции

Функция ПолучитьПорядковыйНомерФайлаВДень()
	
	УникальныйИдентификаторЗначения = "0e1b51a56f674d65c31e2b1d5bb772bс";
	
	ПорядковыйНомерФайла = ркОбщегоНазначенияСервер.ПрочитатьЗначение(УникальныйИдентификаторЗначения,"ПорядковыйНомерФайла");
	Если ПорядковыйНомерФайла <> Неопределено Тогда
		ПорядковыйНомерФайла = ПорядковыйНомерФайла + 1;
		Если ПорядковыйНомерФайла = 1000 Тогда
			ПорядковыйНомерФайла = 1;	
		КонецЕсли;	
		ркОбщегоНазначенияСервер.ЗаписатьЗначение(УникальныйИдентификаторЗначения,"ПорядковыйНомерФайла", ПорядковыйНомерФайла);
	ИначеЕсли ПорядковыйНомерФайла = Неопределено Тогда
		ПорядковыйНомерФайла = 1;
		ркОбщегоНазначенияСервер.ЗаписатьЗначение(УникальныйИдентификаторЗначения,"ПорядковыйНомерФайла", ПорядковыйНомерФайла);	
	КонецЕсли;
	
	Возврат формат(ПорядковыйНомерФайла,"ЧЦ=3; ЧВН=");
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьКорректировки(Команда)
	Адрес = СформироватьКорректировкиНаСервере(ПериодВыгрузки);
	ИмяРеестра =  "D" +  Код +  Формат(Дата(ПериодВыгрузки), "ДФ=MMyy");
	ПолныйПуть = ПутьВыгрузки + Глоб_РазделительПути + ИмяРеестра + ".RKP";
			
	ПолучитьИзВременногоХранилища(Адрес).Записать(ПолныйПуть);
	УдалитьИзВременногоХранилища(Адрес);
	
	//ОчиститьСообщения();
	Сообщить("Файл выгрузки сформирован!");	

КонецПроцедуры

#КонецОбласти

//Загрузка

#Область Загрузка

&НаКлиенте
Процедура ПутьЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	ДиалогОткрытияФайла.Заголовок = "Выберите каталог для файлов загрузки";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		ПутьЗагрузки = ДиалогОткрытияФайла.Каталог;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписок(Команда)
	
	ОчиститьСообщения();
	Файлы.Очистить();
	Глоб_МассивСтруктур = Новый Массив;	
	
	МассивФайлов = НайтиФайлы(ПутьЗагрузки, "*.rk1*");
	
	Для Каждого Файл Из МассивФайлов Цикл
		Попытка
			ДанныеИзФайла = ПолучитьДанныеИзФайла(Файл.ПолноеИмя);
			СтруктураРеестр = Новый Структура;
			СтруктураРеестр.Вставить("Имя",Файл.Имя);
			СтруктураРеестр.Вставить("Хэш",Строка(ПолучитьХэшФайла(Новый ДвоичныеДанные(Файл.ПолноеИмя))));
			СтруктураРеестр.Вставить("Содержание",ДанныеИзФайла);
			СтруктураРеестр.Вставить("Путь",Файл.ПолноеИмя);			
			ОплатыИСчетчикиРеестра = ЗаполнитьТаблицуФайлов(Файл.Имя, ДанныеИзФайла);
			СтруктураРеестр.Вставить("Оплаты",ОплатыИСчетчикиРеестра.Оплаты);
			СтруктураРеестр.Вставить("Счетчики",ОплатыИСчетчикиРеестра.Счетчики);
			Глоб_МассивСтруктур.Добавить(СтруктураРеестр);
		Исключение
			Сообщить("Ошибка формата файла: " + Файл.Имя);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузку(Команда)
	ОчиститьСообщения();
	Если Файлы.Количество() = 0 Тогда
		Сообщить("Необходимо заполнить таблицу загружаемых реестров. Загрузка не выполнена");
		Возврат;
	КонецЕсли;
	
	РезультатЗагрузки = ВыполнитьЗагрузкуНаСервере(Глоб_МассивСтруктур);
	Для Каждого Реестр Из РезультатЗагрузки Цикл 
		
		Если Реестр.КоличествоЗагруженныхОплат > 0 И Реестр.КоличествоЗагруженныхСчетчиков > 0 Тогда
			 СоздатьКаталог(ПутьЗагрузки+Глоб_РазделительПути+"Загруженные реестры");
			 ПереместитьФайл(Реестр.Путь, ПутьЗагрузки+Глоб_РазделительПути+"Загруженные реестры"+Глоб_РазделительПути+Реестр.Имя);
			 ОбновитьСписок(Команда);
		КонецЕсли;
		Сообщить("Загружено оплат "+Строка(Реестр.КоличествоЗагруженныхОплат)+"/"+Реестр.ОплатВРеестре+" из реестра: "+Реестр.Имя);
		Сообщить("Загружено счетчиков "+Строка(Реестр.КоличествоЗагруженныхСчетчиков)+"/"+Реестр.СчетчиковВРеестре+" из реестра: "+Реестр.Имя);
		
	КонецЦикла;	
	
	Если ЖурналОшибок.Количество() <> 0 Тогда
		Ошибки = ПолучитьОтчетЖурналОшибок();
		Ошибки.Показать();
		СоздатьКаталог(ПутьЗагрузки+Глоб_РазделительПути+"Журналы ошибок");
		ИмяФайла = ПутьЗагрузки+Глоб_РазделительПути+"Журналы ошибок"+Глоб_РазделительПути+"Журнал_" + Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd_HHmm") + ".mxl";
		Ошибки.Записать(ИмяФайла);
		ЖурналОшибок.Очистить();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ВыполнитьЗагрузкуНаСервере(Реестры)	
	
	РезультатЗагрузки = Новый Массив;
	
	Для Каждого Реестр Из Реестры Цикл		
		
		ДатаФормирования = ПолучитьДатуФормированияРеестраИзИмени(Реестр.Имя);
		ИдентификаторРеестра = Реестр.Хэш;
		
		ДанныеДляЗагрузкиОплаты = Новый ТаблицаЗначений;
		ДанныеДляЗагрузкиОплаты.Колонки.Добавить("СтрокаРеестра");
		
		ДанныеДляЗагрузкиСчетчиков = Новый ТаблицаЗначений;
		ДанныеДляЗагрузкиСчетчиков.Колонки.Добавить("СтрокаРеестра");
		
		Для Каждого МассивИзСтрокиРеестра Из Реестр.Содержание Цикл
			Если ПолучитьКоличествоСчетчиковВСтроке(МассивИзСтрокиРеестра, Глоб_ПозицияБлокаСчетчиков - 1) > 0 Тогда
				СтрокаДанныхОплата = ДанныеДляЗагрузкиОплаты.Добавить();
				СтрокаДанныхОплата.СтрокаРеестра = МассивИзСтрокиРеестра;
				СтрокаДанныхСчетчики = ДанныеДляЗагрузкиСчетчиков.Добавить();
				СтрокаДанныхСчетчики.СтрокаРеестра = МассивИзСтрокиРеестра;				
			Иначе
				СтрокаДанныхОплата = ДанныеДляЗагрузкиОплаты.Добавить();
				СтрокаДанныхОплата.СтрокаРеестра = МассивИзСтрокиРеестра;
			КонецЕсли;			
		КонецЦикла;
		
		РезультатЗагрузкиРеестра = Новый Структура;
		КоличествоЗагруженныхОплат = ЗагрузитьОплату(Реестр.Имя, ДатаФормирования, ИдентификаторРеестра, ДанныеДляЗагрузкиОплаты);
		КоличествоЗагруженныхСчетчиков = ЗагрузитьСчетчики(Реестр.Имя, ДатаФормирования, ИдентификаторРеестра, ДанныеДляЗагрузкиСчетчиков);
		РезультатЗагрузкиРеестра.Вставить("Имя", Реестр.Имя);
		РезультатЗагрузкиРеестра.Вставить("Путь", Реестр.Путь);
		РезультатЗагрузкиРеестра.Вставить("ОплатВРеестре", Реестр.Оплаты);
		РезультатЗагрузкиРеестра.Вставить("СчетчиковВРеестре", Реестр.Счетчики);
		РезультатЗагрузкиРеестра.Вставить("КоличествоЗагруженныхОплат", КоличествоЗагруженныхОплат);
		РезультатЗагрузкиРеестра.Вставить("КоличествоЗагруженныхСчетчиков", КоличествоЗагруженныхСчетчиков);
		РезультатЗагрузки.Добавить(РезультатЗагрузкиРеестра);
		
	КонецЦикла;
	
	Возврат РезультатЗагрузки;
	
КонецФункции

Функция ПолучитьДатуФормированияРеестраИзИмени(ИмяРеестра)
	
	Возврат ФорматироватьДату(СтрРазделить(СтрРазделить(ИмяРеестра, "_")[2], ".")[0], Ложь);
	
КонецФункции

Функция ФорматироватьДату(СтрДата, ЕстьРазделитель = Истина)
	
	Если ЕстьРазделитель Тогда 
		НачальныйНомерМесяца = 4;
		НачальныйНомерГода = 7;
	Иначе 
		НачальныйНомерМесяца = 3;
		НачальныйНомерГода = 5;
	КонецЕсли;
	
	День = Число(Лев(СтрДата, 2));
	Месяц = Число(Сред(СтрДата, НачальныйНомерМесяца, 2));
	Год = Число(Сред(СтрДата, НачальныйНомерГода, 4));	
	Дата = Дата(Год, Месяц, День);
	
	Возврат Дата;
	
КонецФункции

Функция ЗаменитьПустыеЭлементы(Массив)
	
	Для  ИндексЭлемента = 0 По Массив.Количество() - 1 Цикл 
		Если Массив[ИндексЭлемента] = "" Тогда 
			Массив[ИндексЭлемента] = 0;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции

&НаКлиенте
Функция ПолучитьДанныеИзФайла(ПутьКФайлу)
	
	МассивСтрокРеестра = Новый Массив;
	
	ТекстРеестра = Новый ЧтениеТекста(ПутьКФайлу, КодировкаТекста.ANSI);
	СтрокаРеестра = ТекстРеестра.ПрочитатьСтроку();
	
	Пока СтрокаРеестра <> Неопределено И Лев(СтрокаРеестра, 1) <> "=" Цикл 
		
		Если Прав(СтрокаРеестра, 1) = ";" Тогда	
			СтрокаРеестра = Лев(СтрокаРеестра, СтрДлина(СтрокаРеестра) - 1);
		КонецЕсли;
		
		МассивПолей = СтрРазделить(СтрокаРеестра, Глоб_РазделительПолей);
		МассивСтрокРеестра.Добавить(МассивПолей);
		СтрокаРеестра = ТекстРеестра.ПрочитатьСтроку();
	КонецЦикла;
	
	Возврат МассивСтрокРеестра;
	
КонецФункции

&НаСервере
Функция ЗаполнитьТаблицуФайлов(ИмяРеестра, Данные)
	
	ДатаФормированияРеестра = ПолучитьДатуФормированияРеестраИзИмени(ИмяРеестра);
	ОплатВРеестре = 0;
	СчетчиковВРеестре = 0;
	Сумма = 0;
	Для Каждого Строка Из Данные Цикл 
		Сумма = Сумма + Число(Строка[Глоб_ИндексСуммаОплаты - 1]);
		ОплатВРеестре = ОплатВРеестре + 1;
		СчетчиковВРеестре = СчетчиковВРеестре + ПолучитьКоличествоСчетчиковВСтроке(Строка, Глоб_ПозицияБлокаСчетчиков - 1);
	КонецЦикла;
	
	ОплатыИСчетчикиРеестра = Новый Структура;
	ОплатыИСчетчикиРеестра.Вставить("Оплаты",ОплатВРеестре);
	ОплатыИСчетчикиРеестра.Вставить("Счетчики",СчетчиковВРеестре);
	
	Стр = Файлы.Добавить();
	Стр.Дата = ДатаФормированияРеестра;
	Стр.Реестр = ИмяРеестра;
	Стр.ОплатВРеестре = ОплатВРеестре;
	Стр.СчетчиковВРеестре = СчетчиковВРеестре;
	Стр.Сумма = Сумма;
	
	Возврат ОплатыИСчетчикиРеестра;
	
КонецФункции

&НаСервере                  
Функция ПолучитьКоличествоСчетчиковВСтроке(МассивПолей, ПозицияБлокаСчетчиков, РазделительОбщий = Истина)
	
	СчетчикиВСроке = Новый Массив;
	
	Если РазделительОбщий Тогда 
		Для i = ПозицияБлокаСчетчиков По МассивПолей.Количество() - 1 Цикл 
			СчетчикиВСроке.Добавить(МассивПолей[i]);
		КонецЦикла;
	Иначе	
		СчетчикиВСроке = СтрРазделить(МассивПолей[ПозицияБлокаСчетчиков], Глоб_РазделительСчетчиков);
	КонецЕсли;
	
	Возврат Окр(СчетчикиВСроке.Количество()/2);
	
КонецФункции	

&НаСервере
Функция ПолучитьХэшФайла(ДанныеФайла)
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.SHA1);
	ХешированиеДанных.Добавить(ДанныеФайла);
	Возврат ХешированиеДанных.ХешСумма;
КонецФункции
	
Функция ЗагрузитьОплату(ИмяРеестра, ДатаФормирования, ИдентификаторРеестра, ДанныеДляЗагрузкиОплаты)
	КоличествоЗагруженныхОплат = 0;		
	
	Документ = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                        |	ркОплата.Ссылка КАК Док
	                        |ИЗ
	                        |	Документ.ркОплата КАК ркОплата
	                        |ГДЕ
	                        |	ркОплата.ИдентификаторРеестра = &ИдентификаторРеестра
	                        |	И ркОплата.ПометкаУдаления = ЛОЖЬ
	                        |
	                        |СГРУППИРОВАТЬ ПО
	                        |	ркОплата.Ссылка");
	Документ.УстановитьПараметр("ИдентификаторРеестра", ИдентификаторРеестра);
	РезультатыЗапросаДокумент = Документ.Выполнить().Выбрать();
	
	Если РезультатыЗапросаДокумент.Следующий() Тогда		
		Сообщить("Оплата из реестра "+ ИмяРеестра + " уже загружена в документ "+РезультатыЗапросаДокумент.Док);
		// Реестр уже загружен
	Иначе 
		Документ = Документы.ркОплата.СоздатьДокумент();
		Документ.ИдентификаторРеестра = ИдентификаторРеестра;
		Документ.Заполнить(Неопределено);
		Документ.Комментарий = "Данные загружены из реестра::" + ИмяРеестра;
		Документ.Дата = Макс(ДатаФормирования, ркОбщегоНазначенияСервер.ПолучитьДатуНачалаТекущегоРасчетногоПериода());
		ОшибкаПериода = Ложь;
		Если ДатаФормирования < ркОбщегоНазначенияСервер.ПолучитьДатуНачалаТекущегоРасчетногоПериода() Тогда
			ОшибкаПериода = Истина;
		КОнецЕсли;
		
		Документ.ТипОперации=Перечисления.ркТипыОперацийОплаты.ЗачетОплаты;
		Документ.ОтложенноеРаспределение = Истина;
		Документ.СпособОплаты = СпособОплаты;
		
		ДокументУстановитьСсылкуНового(Документ);
		
		Для Каждого СтрокаДанныхРеестра Из ДанныеДляЗагрузкиОплаты Цикл
			ДанныеДляОплаты = СтрокаДанныхРеестра.СтрокаРеестра;
			
			КодЛицевогоСчета = СокрЛП(ДанныеДляОплаты[Глоб_ИндексНомерЛС - 1]);
			ЛицевойСчет = Справочники.ркЛицевыеСчета.НайтиПоКоду(КодЛицевогоСчета);
			
			Если ЛицевойСчет.Ссылка.Пустая() Тогда
				ЗарегистрироватьОшибку(
					КодЛицевогоСчета,
					"Лицевой счет №"+КодЛицевогоСчета+" "+ДанныеДляОплаты[Глоб_ИндексФИО - 1]+" не найден!",
					ИмяРеестра,
					Документ.ПолучитьСсылкуНового(),
					"Оплата не загружена"
				);
				Продолжить;
			Иначе 
				СтрокаДокумента = Документ.Состав.Добавить();
				СтрокаДокумента.ЛицевойСчет = ЛицевойСчет; 
				СтрокаДокумента.Сумма = Число(ДанныеДляОплаты[Глоб_ИндексСуммаОплаты - 1]);
				СтрокаДокумента.ДатаОплаты = ФорматироватьДату(ДанныеДляОплаты[Глоб_ИндексДатаОплаты - 1]);
				КоличествоЗагруженныхОплат = КоличествоЗагруженныхОплат + 1;
			КонецЕсли;
		КонецЦикла;
		Если Документ.Состав.Количество() <> 0 И ОшибкаПериода = Ложь Тогда 
			Документ.Записать(РежимЗаписиДокумента.Проведение);
			Сообщить("Создан документ:"+Документ.Ссылка);
		КонецЕсли;
		Если ОшибкаПериода Тогда
			Сообщить("Документ: "+Документ.Ссылка+" проведен в текущем периоде! Исходная дата документа: "+ДатаФормирования);
		КонецЕсли;
	КонецЕсли;		  
	Возврат КоличествоЗагруженныхОплат;
КонецФункции

Функция ЗагрузитьСчетчики(ИмяРеестра, ДатаФормирования, ИдентификаторРеестра, ДанныеДляЗагрузкиСчетчиков)
	
	КоличествоЗагруженныхСчетчиков = 0;
	
	Если ДанныеДляЗагрузкиСчетчиков.Количество() <> 0 Тогда
		
		ДокументПоказания = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
			                                 |	ркПоказанияСчетчиков.Ссылка КАК ПоказанияСчетчиков
			                                 |ИЗ
			                                 |	Документ.ркПоказанияСчетчиков КАК ркПоказанияСчетчиков
			                                 |ГДЕ
			                                 |	ркПоказанияСчетчиков.ИдентификаторРеестра = &ИдентификаторРеестра
			                                 |	И ркПоказанияСчетчиков.ПометкаУдаления = Ложь");
		ДокументПоказания.УстановитьПараметр("ИдентификаторРеестра", ИдентификаторРеестра);
		РезультатыЗапросаДокументПоказания = ДокументПоказания.Выполнить().Выбрать();
		
		Если РезультатыЗапросаДокументПоказания.Следующий() Тогда
			Сообщить("Показания счетчиков из реестра " + ИмяРеестра + ", уже были загружены в документ "+РезультатыЗапросаДокументПоказания.ПоказанияСчетчиков);
			// реестр уже загружен
		Иначе
					
			ДокументПоказаний = Документы.ркПоказанияСчетчиков.СоздатьДокумент();
			ДокументПоказаний.ИдентификаторРеестра = ИдентификаторРеестра;
			ДокументПоказаний.Заполнить(Неопределено);					
			//ДокументПоказаний.Дата = Макс(ТекущаяДата(), ркОбщегоНазначенияСервер.ПолучитьДатуНачалаТекущегоРасчетногоПериода());
			ДокументПоказаний.Дата = ДатаФормирования;
			ДокументПоказаний.Комментарий = "Данные загружены из реестра::" + ИмяРеестра;
			
			ДокументУстановитьСсылкуНового(ДокументПоказаний);
			                        
			Для Каждого СтрокаДанныхРеестра Из ДанныеДляЗагрузкиСчетчиков Цикл
				
				СчетчикиЛицевогоСчетаИзРеестра = ПолучитьСчетчикиИзСтрокиФайла(СтрокаДанныхРеестра.СтрокаРеестра, Глоб_ПозицияБлокаСчетчиков - 1);
				
				Если СчетчикиЛицевогоСчетаИзРеестра = 0 Тогда 
					Продолжить;
				КонецЕсли;
				
				Если СчетчикиЛицевогоСчетаИзРеестра = Неопределено Тогда
					ЗарегистрироватьОшибку(
						СтрокаДанныхРеестра.СтрокаРеестра[Глоб_ИндексНомерЛС - 1],
						"Ошибка формата строки счетчиков в лицевом счёте: " + СтрокаДанныхРеестра.СтрокаРеестра[Глоб_ИндексФИО - 1],
						ИмяРеестра,
						ДокументПоказаний.ПолучитьСсылкуНового(),
						"Счетчики не загружены"
					);
					Продолжить;
				КонецЕсли;
				
				ПредыдущийКодЛицевогоСчета = "";
				
				Для Каждого СчетчикЛС Из СчетчикиЛицевогоСчетаИзРеестра Цикл
										
					КодЛицевогоСчета = СчетчикЛС.КодЛС;
					
					ЛицевойСчет = Справочники.ркЛицевыеСчета.НайтиПоКоду(СчетчикЛС.КодЛС);
					
					Если ПредыдущийКодЛицевогоСчета <> КодЛицевогоСчета Тогда  
						СчетчикиЛицевогоСчетаИзБазы = ПолучитьСчетчикиЛицевогоСчетаИзБазы(ЛицевойСчет);
						ПредыдущийКодЛицевогоСчета = КодЛицевогоСчета;
					КонецЕсли;
					
					СчетчикЛицевогоСчетаВБазе = СчетчикиЛицевогоСчетаИзБазы.Найти(ВРег(СчетчикЛС.НаименованиеСчетчика), "СчетчикНаименование");
					
					Если СчетчикЛицевогоСчетаВБазе <> Неопределено Тогда
																
						Счетчик = СчетчикЛицевогоСчетаВБазе.СчетчикСсылка;
						ВидПоказаний = Справочники.ркВидыПоказанийСчетчиков.НайтиПоКоду(СчетчикЛС.КодВидаПоказания);
						НачальныеПоказания = Документы.ркПоказанияСчетчиков.ПолучитьНачальныеПоказанияПоПриборуУчета(Счетчик, ВидПоказаний);
						КонечныеПоказания = Документы.ркПоказанияСчетчиков.ФорматироватьПоказанияСУчетомРазрядности(Счетчик, ВидПоказаний, СчетчикЛС.Показания);
						Количество =  Число(КонечныеПоказания) - Число(НачальныеПоказания);
						
						Если Число(КонечныеПоказания) = 0 Тогда
							ЗарегистрироватьОшибку(
								СчетчикЛС.КодЛС,
								"Плательщик "+СчетчикЛС.ЛицевойСчет+" не подал показания счетчика '"+СчетчикЛС.НаименованиеСчетчика+"'",
								ИмяРеестра,
								ДокументПоказаний.ПолучитьСсылкуНового(),
								"Счетчик не загружен"
							);
							Продолжить;	
						КонецЕсли;
						Если Количество < 0 Тогда
							ЗарегистрироватьОшибку(
								СчетчикЛС.КодЛС,
								"Счетчик '"+СчетчикЛС.НаименованиеСчетчика+"' не заргужен из-за некорректных показаний",
								ИмяРеестра,
								ДокументПоказаний.ПолучитьСсылкуНового(),
								"Счетчик не загружен"
							);
							Продолжить;						
						КонецЕсли;
						
						СтрокаДокумента = ДокументПоказаний.Состав.Добавить();
						СтрокаДокумента.ЛицевойСчет = ЛицевойСчет;
						СтрокаДокумента.Дом = ЛицевойСчет.Дом;
						СтрокаДокумента.Помещение = ЛицевойСчет.Помещение;
						СтрокаДокумента.Счетчик = Счетчик; 
						СтрокаДокумента.ВидПоказаний = ВидПоказаний;
						СтрокаДокумента.НачальныеПоказания = НачальныеПоказания;
						СтрокаДокумента.КонечныеПоказания = КонечныеПоказания;
						СтрокаДокумента.Количество = Количество;
						СтрокаДокумента.ДатаНачалаПоказаний = ПолучитьДатуНачалаПоказаний(Счетчик, ВидПоказаний, ДатаФормирования);
						СтрокаДокумента.ДатаОкончанияПоказаний = КонецМесяца(ДатаФормирования);
						КоличествоЗагруженныхСчетчиков = КоличествоЗагруженныхСчетчиков + 1;
						
					Иначе 
						ЗарегистрироватьОшибку(
							СчетчикЛС.КодЛС,
							"Счетчик '"+СчетчикЛС.НаименованиеСчетчика+"' отсутствует",
							ИмяРеестра,
							ДокументПоказаний.ПолучитьСсылкуНового(),
							"Счетчик не загружен"
						);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			Если ДокументПоказаний.Состав.Количество() <> 0 Тогда 
				Документы.ркПоказанияСчетчиков.ВыполнитьРаспределениеПоказанийСчетчиков(ДокументПоказаний);
				ДокументПоказаний.Записать(РежимЗаписиДокумента.Проведение);
				Сообщить("Создан документ: "+ДокументПоказаний.Ссылка);
			КонецЕсли;
		КонецЕсли;
	Иначе
		КоличествоЗагруженныхСчетчиков = 0;
	КонецЕсли;	
	Возврат КоличествоЗагруженныхСчетчиков;
КонецФункции

Функция ПолучитьСчетчикиИзСтрокиФайла(МассивИзСтрокиРеестра, ПозицияБлокаСчетчиков,  РазделительОбщий = Истина)
	
	Счетчики = Новый Массив;
	
	Если РазделительОбщий Тогда 
		Для i = ПозицияБлокаСчетчиков по МассивИзСтрокиРеестра.Количество()-1 Цикл
			Счетчики.Добавить(МассивИзСтрокиРеестра[i]);
		КонецЦикла;		
	Иначе
		Счетчики = СтрРазделить(МассивИзСтрокиРеестра[ПозицияБлокаСчетчиков], Глоб_РазделительСчетчиков);
	КонецЕсли;
	
	ЗаменитьПустыеЭлементы(Счетчики);
		
	Если Счетчики.Количество() % 2 = 0 Тогда
		ТЗ = Новый ТаблицаЗначений;
		ТЗ.Колонки.Добавить("КодЛС");
		ТЗ.Колонки.Добавить("ЛицевойСчет");
		ТЗ.Колонки.Добавить("НаименованиеСчетчика");
		ТЗ.Колонки.Добавить("КодВидаПоказания");
		ТЗ.Колонки.Добавить("Показания");
		
		Позиция = 0;
		ДлинаКодаВидаПоказания = Метаданные.Справочники.ркВидыПоказанийСчетчиков.ДлинаКода;
		
		Пока Позиция < Счетчики.Количество() Цикл 
			СтрТЗ = ТЗ.Добавить();
			СтрТЗ.КодЛС = МассивИзСтрокиРеестра[Глоб_ИндексНомерЛС - 1];
			СтрТЗ.ЛицевойСчет = МассивИзСтрокиРеестра[Глоб_ИндексФИО - 1];
			СтрТЗ.НаименованиеСчетчика = СтрРазделить(Счетчики[Позиция], Глоб_РазделительКодовВНаименованииСчетчика)[1];
			СтрТЗ.КодВидаПоказания =  ДополнитьКодВедущимиНулями(СтрРазделить(Счетчики[Позиция], Глоб_РазделительКодовВНаименованииСчетчика)[0], ДлинаКодаВидаПоказания);
			СтрТЗ.Показания = Число(Счетчики[Позиция + 1]);
			Позиция = Позиция + 2;		
		КонецЦикла;
		Если ТЗ.Количество() > 0 Тогда
			Возврат ТЗ;
		Иначе
			Возврат 0;	
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСчетчикиЛицевогоСчетаИзБазы(ЛицевойСчет)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ркСчетчики.Код,
	|	ркСчетчики.Ссылка КАК СчетчикСсылка,
	|	ркСчетчики.Наименование КАК СчетчикНаименование
	|ИЗ
	|	Справочник.ркСчетчики КАК ркСчетчики
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ркЛицевыеСчета КАК ркЛицевыеСчета
	|		ПО ркСчетчики.Владелец = ркЛицевыеСчета.Помещение
	|ГДЕ
	|	ркЛицевыеСчета.Ссылка = &ЛицевойСчет");
	
	Запрос.УстановитьПараметр("ЛицевойСчет", ЛицевойСчет);
	ТЗСчетчики = Запрос.Выполнить().Выгрузить();             
		
	Для Каждого Строка Из ТЗСчетчики Цикл
		Строка.СчетчикНаименование = ВРег(Строка.СчетчикНаименование);
	КонецЦикла;
	
	ТЗСчетчики.Индексы.Добавить("СчетчикНаименование");
	
	Возврат ТЗСчетчики;
	
КонецФункции

функция ДополнитьКодВедущимиНулями(ДополняемыйКод, ДлинаКодаВСправочнике)
	
	КоличествоДополняющихНулей = ДлинаКодаВСправочнике - СтрДлина(ДополняемыйКод);
	СтрокаДополняющихНулей = "";
	Для i = 1 По КоличествоДополняющихНулей Цикл 
		СтрокаДополняющихНулей = СтрокаДополняющихНулей + "0";
	КонецЦикла;
	
	Возврат Строка(СтрокаДополняющихНулей) + Строка(ДополняемыйКод);
	
КонецФункции

Функция ПолучитьВидПоказанийСчетчика(КодСчетчика)
	СписокВидовПоказаний = Справочники.ркСчетчики.НайтиПоКоду(КодСчетчика).ВидыПоказаний;
	КоличествоВидовПоказаний = СписокВидовПоказаний.Количество();
	ВидПоказаний = ?(КоличествоВидовПоказаний = 1, СписокВидовПоказаний[0].ВидПоказаний, Неопределено);
	Возврат ВидПоказаний;
КонецФункции

Функция ПолучитьДатуНачалаПоказаний(Счетчик, ВидПоказаний, Период)
	
	ДатаПоследнихПоказаний = Документы.ркПоказанияСчетчиков.ПолучитьДатуПоследнихПоказаний(Счетчик, ВидПоказаний, Период);
	ДатаОткрытияСчетчика = Документы.ркПоказанияСчетчиков.ПолучитьДатуОткрытияСчетчика(Счетчик, Период);
	//ДатаНачалаТекущегоРасчетногоПериода = ркОбщегоНазначенияСервер.ПолучитьДатуНачалаТекущегоРасчетногоПериода();
	ДатаФормирования = НачалоМесяца(Период);
	
	Если ДатаОткрытияСчетчика = Неопределено Тогда
		ПериодОткрытияСчетчика = Неопределено;
	Иначе
		ПериодОткрытияСчетчика = НачалоМесяца(ДатаОткрытияСчетчика);
	КонецЕсли;
	
	//Сравниваем какую дату использовать: ПериодОткрытияСчетчика или ДатаПоследнихПоказаний.
	Если ДатаПоследнихПоказаний = Неопределено Тогда
		ДатаНачалаПоказаний = ПериодОткрытияСчетчика;
	Иначе
		//Если в месяце были показания, то новые показания нужно вводить со следующего месяца
		ДатаНачалаПоказаний = НачалоМесяца(ДобавитьМесяц(ДатаПоследнихПоказаний, 1));
		Если ПериодОткрытияСчетчика <> Неопределено Тогда
			ДатаНачалаПоказаний = Макс(ДатаНачалаПоказаний, ПериодОткрытияСчетчика);
		КонецЕсли;
	КонецЕсли;
	
	//Сравниваем какую дату использовать: ДатаНачалаПоказаний или ДатаНачалаТекущегоРасчетногоПериода.
	Если ДатаНачалаПоказаний = Неопределено Тогда
		ДатаНачалаПоказаний = ДатаФормирования;
	Иначе
		ДатаНачалаПоказаний = Мин(ДатаНачалаПоказаний, ДатаФормирования);
	КонецЕсли;
	
	Возврат ДатаНачалаПоказаний;
КонецФункции

Процедура ДокументУстановитьСсылкуНового(Документ)
	НоваяСсылка = Документы[Документ.Метаданные().Имя].ПолучитьСсылку();
	Документ.УстановитьСсылкуНового(НоваяСсылка);
КонецПроцедуры

Процедура ЗарегистрироватьОшибку(НомерЛС, Описание, Реестр, Документ = Неопределено, ТипОшибки = "Ошибка")
	Строка = ЖурналОшибок.Добавить();
	Строка.Дата = ТекущаяДата();
	Строка.Реестр = Реестр;
	Строка.НомерЛС = НомерЛС;
	Строка.Описание = Описание;
	Строка.Документ = Документ;
	Строка.ТипОшибки = ТипОшибки;
КонецПроцедуры

Функция ПолучитьОтчетЖурналОшибок()
	ВнешниеДанные = Новый Структура("ЖурналОшибок", РеквизитФормыВЗначение("ЖурналОшибок"));
	Отчет = ПолучитьОтчетСКД("СКДЖурналОшибок", ВнешниеДанные);
	Возврат Отчет;
КонецФункции

Функция ПолучитьОтчетСКД(НаименованиеМакета, ВнешниеДанные)
	//Получаем схему из макета
	СхемаКомпоновкиДанных = РеквизитФормыВЗначение("Объект").ПолучитьМакет(НаименованиеМакета);
	
	//Из схемы возьмем настройки по умолчанию
	Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;

	//Помещаем в переменную данные о расшифровке данных
	//ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;

	//Формируем макет, с помощью компоновщика макета
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;

	//Передаем в макет компоновки схему, настройки и данные расшифровки
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки);
	
	//Выполним компоновку с помощью процессора компоновки
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеДанные);

	////Очищаем поле табличного документа
	//Результат = ЭлементыФормы.Результат;
	//Результат.Очистить();
	Результат = Новый ТабличныйДокумент();

	//Выводим результат в табличный документ
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(Результат);

	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	Возврат Результат;
КонецФункции


#КонецОбласти

#Область ИнициализацияГлобальныхПеременных

	Глоб_ИндексНомерЛС = 6;
	Глоб_ИндексФИО = 7;
	Глоб_ИндексСуммаОплаты = 11;
	Глоб_ИндексДатаОплаты = 1;
	Глоб_ПозицияБлокаСчетчиков = 13;
	Глоб_РазделительПути = ПолучитьРазделительПути();
	Глоб_РазделительПолей = "=";
	Глоб_РазделительСчетчиков = "=";
	Глоб_РазделительКодовВНаименованииСчетчика = "#";
	
#КонецОбласти





